# -*- coding: utf-8 -*-
"""DeliverableData2.ipynb

Automatically generated by Colaboratory.


# Deliverable Data Collection

This is a collection of data for esports earnings related to teams, players, tournaments, and other data.
"""

!pip install datascience

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from datascience import *

import matplotlib
# %matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
import warnings
warnings.simplefilter('ignore', FutureWarning)

from google.colab import drive
drive.mount('/content/drive')

ls /content/drive/My\ Drive/Deliverable\ Data

"""Path1 is connecting the csv file of all the top 500 esports players and their earnings. It contains total earnings and earning from their most successful game. The top 250 have  their team, age and country of origin manually added as well."""

path1 = "/content/drive/My Drive/Deliverable Data/Esports_player_total_earnings.csv"
player_earnings_table = Table.read_table(path1)
player_earnings_table.show(100)

"""Removing players without team/age/country"""

player_earnings_table_half = player_earnings_table.where('Placement',are.below(251))
player_earnings_table_half.show(10)

"""Path2 is connecting the csv file of the top 500 esports teams and their earnings. This also contains how many tournaments they play in."""

path2 = "/content/drive/My Drive/Deliverable Data/Esports_team_total_earnings.csv"
team_earnings_table = Table.read_table(path2)
team_earnings_table.show(10)

"""Path3 is connecting the csv file of the list of all esports teams compiled and sorted by region and game."""

path3 = "/content/drive/My Drive/Deliverable Data/Team_Overall.csv"
all_teams_table = Table.read_table(path3)
all_teams_table.show(10)

"""Player_earnings_less is dropping the placement,full name, earnings from game specifically, and percent of total from the table. It also removes the bottom 250 players from the table due to no infor on age,country, and team."""

Player_earnings_less = player_earnings_table_half.drop('Placement', 'Full Name', 'Earnings from game','Percent of total')

Player_earnings_less.show(10)

"""Team_earning_touirnament is dropping placement from the table and rearranging the columns."""

Team_earnings_tournament = team_earnings_table.select('Team Name','Number of tournaments','Total Earnings')
Team_earnings_tournament.show(10)

"""Retrieving stats for player_earnings_less"""

Player_earnings_less.stats()

"""Retrieving stats for Team_earnings_tournament

"""

Team_earnings_tournament.stats()

"""Game_player is counting the number of games encountered within the top 250 players"""

Game_player = Player_earnings_less.group('Game').sort('count',descending=True)
Game_player.show(10)

"""Tourney_team is counting the number of teams that have played certain amounts of tournaments"""

Tourney_team = Team_earnings_tournament.group("Number of tournaments").sort('count',descending=True)
Tourney_team.show(10)

"""all_team_count counts how many duplicate team names there are within the table of all teams"""

all_team_count = all_teams_table.group('Team Name').sort('count',descending=True)
all_team_count.show(10)

"""team_earnings_count is joining team_earnings_tournament and all_team_countto show how many teams each organization has in relation to their earnings and tournaments."""

team_earnings_count = Team_earnings_tournament.join('Team Name', all_team_count)
team_earnings_count.show(10)

"""Earnings is reducing the total earnings into percentages so they can be organized neater. 
Team earnings count reduced replaces the previous total earnings column with the new percentage one. 
Team earnings count reduced sorted removes some of much smaller total earning teams and sorts the table in descending order in relation to total earnings."""

earnings = team_earnings_count.column('Total Earnings')/1000000
team_earnings_count_reduced = team_earnings_count.drop('Total Earnings').with_column('Total Earnings',earnings)
team_earnings_count_reduced_sorted = team_earnings_count_reduced.where("Total Earnings",are.above(.5)).sort('Total Earnings',descending = True)
team_earnings_count_reduced_sorted.show(10)

"""This bar graph plots number of tournaments vs the total earnings for each team"""

team_earnings_count_reduced_sorted.barh("Number of tournaments","Total Earnings")

"""This scatter plot plots number of tournaments vs total earnings for each team"""

team_earnings_count_reduced_sorted.scatter("Number of tournaments",'Total Earnings', fit_line = True)

"""This scatter plot plots the number of teams for an organization vs their total earnings"""

team_earnings_count_reduced_sorted.scatter('count','Total Earnings',fit_line = True)

"""Start to deliverable data cleaning part

Missing data = Age for certain players, teams/age/country for bottom 250 players

For the age missing on certain players, I removed them due to them being a minority within the group. 
For the bottom 250 players, they were also removed due to time constraints from me having to manually input all information for the players.
I do not believe this will impact the data too badly because there is still a large amount of data collected and shared between all sheets and predictions and corrections can still be made with this data.

Encoding of player data
"""

import numpy as np
import pandas as pd

player_setup = player_earnings_table_half.drop('Placement', 'Full Name', 'Earnings from game','Percent of total') 
player_setup_less = player_setup.where('Age during most earnings',are.not_equal_to(0))
player_df = player_setup_less.to_df()
player_setup_less.show(10)
print(player_df)

"""Encoding team data"""

team_earnings = team_earnings_table.column('Total Earnings')
team_placement = team_earnings_table.column('Placement')
team_setup = team_earnings_table.drop('Total Earnings').with_column('Total Team Earnings',team_earnings).drop('Placement').with_column('Team Placement',team_placement).join('Team Name',all_teams_table).sort('Total Team Earnings', descending=True)
team_df = team_setup.to_df()

print(team_df)

"""Combining tables"""

player_df.merge(team_df,how = 'left')

reduced_player_earnings = Player_earnings_less.column('Total Earnings')/1000000
player_earnings_count_reduced = Player_earnings_less.drop('Total Earnings').with_column('Total Earnings',reduced_player_earnings)

player_earnings2 = player_earnings_count_reduced.select("Total Earnings","Age during most earnings")
player_earnings2.show()

player_earnings2_clean = player_earnings2.where("Age during most earnings", are.above(0))
age_column = player_earnings2_clean.column('Age during most earnings')
player_earnings2_clean2= player_earnings2_clean.drop('Age during most earnings').with_column('Age',age_column).sort('Age',descending = True)
player_earnings2_clean2.show()

group_age = player_earnings2_clean2.group('Age').sort('Age',descending=True)
group_age.show()

earnings_df = player_earnings2_clean2.to_df()
print(earnings_df)

earnings_array = earnings_df.to_numpy()
print(earnings_array)
"""Start of cluster creation"""
from sklearn.cluster import KMeans

km = KMeans(
    n_clusters =3, init ='random',
    n_init = 10, max_iter = 300,
    tol = 1e-04, random_state = 64
)

km.fit(earnings_array)

clusters = km.predict(earnings_array)
print(clusters)

player_earnings_C = player_earnings2_clean2.with_column('Clustering Result',clusters)
player_earnings_C0 = player_earnings_C.where('Clustering Result',are.equal_to(0))
player_earnings_C1 = player_earnings_C.where('Clustering Result',are.equal_to(1))
player_earnings_C2 = player_earnings_C.where('Clustering Result',are.equal_to(2))


player_earnings_C.show()

centers = km.cluster_centers_
print(centers)
"""end of cluster creation"""
player_earnings_C0_df = player_earnings_C0.to_df()
C0_array = player_earnings_C0_df.to_numpy()
player_earnings_C1_df = player_earnings_C1.to_df()
C1_array = player_earnings_C1_df.to_numpy()
player_earnings_C2_df = player_earnings_C2.to_df()
C2_array = player_earnings_C2_df.to_numpy()

""" Creation of scatter plots """
plt.scatter(C0_array[:,0], C0_array[:,1], color="b")
plt.scatter(C1_array[:,0], C1_array[:,1], color="g")
plt.scatter(C2_array[:,0], C2_array[:,1], color="r")
plt.scatter(centers[:,0], centers[:,1], marker='*', color='black')

player_earnings_C.hist('Age', group = "Clustering Result",)